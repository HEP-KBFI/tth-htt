#!/bin/bash
# File: sbatch-node.hadd.sh.template
# Version: 0.2

# unset JAVA_HOME, because hadoop commands might not work
# this is especially true if one has sourced necessary files for the GRID proxy
echo 'Unsetting JAVA_HOME=$JAVA_HOME'
unset JAVA_HOME


# This value is provided by sbatchManager.py that creates sbatch scripts based this template
echo 'Running script {{ script_file }} (created from template {{ job_template_file }})'

RUNNING_COMMAND="{{ RUNNING_COMMAND }}"
export JOB_DIR="{{ job_dir }}/$SLURM_JOBID"

# Runs executable, wrapped into failure wrapper

cleanup() {
    if [ ! -z "$1" ]; then
        echo "Deleting directory: rm -r $1"
        rm -r "$1";
    fi
}

main() {
    run_wrapped_executable &>> "{{ wrapper_log_file }}"
    EXIT_CODE=$?

    cleanup "$JOB_DIR"

    return $EXIT_CODE
}

# Creates scratch dir on cluster node or a directory under $HOME and runs the executable

run_wrapped_executable() {
    if [[ ! -f /cvmfs/cms.cern.ch/cmsset_default.sh ]]; then
        echo "Network drive not mounted on $HOSTNAME"
        return 8
    fi

    KEEP_LOGS={{ keep_logs }}
    EXECUTABLE_LOG_FILE="{{ executable_log_file }}"
    EXECUTABLE_LOG_DIR="`dirname $EXECUTABLE_LOG_FILE`"
    EXECUTABLE_LOG_FILE_NAME="`basename $EXECUTABLE_LOG_FILE`"
    RANDOM_SLEEP={{ random_sleep }}

    echo "Time is: `date`"
    echo "Hostname: `hostname`"
    echo "Current directory: `pwd`"

    # change cp, stat and ls commands in case the output directory is on /hdfs
    OUTPUT_DIR="{{ outputDir }}"
    cp_cmd=cp;
    st_cmd="stat --printf='%s'"
    ls_cmd="ls -l"
    ls_cmd_mult="ls -d -1"
    ls_cmd_sfx="*"
    cp_cmd="$cp_cmd -f"

    # if all output files already exist, quit the job and return 0
    INPUT_FILES="{{ inputFiles }}"
    OUTPUT_FILES="{{ outputFiles }}"
    OUTPUT_FILES_EXIST=true
    if [ $(echo "$OUTPUT_FILES" | wc -w) -ne 1 ]; then
      OUTPUT_DIR_FILES=$($ls_cmd_mult $OUTPUT_DIR/$ls_cmd_sfx | grep $OUTPUT_DIR | awk '{print $NF}')

      for OUTPUT_FILE in $OUTPUT_FILES; do
        OUTPUT_FILE_FULLPATH=${OUTPUT_DIR}/${OUTPUT_FILE}
        OUTPUT_FILE_GREP=$(echo "$OUTPUT_DIR_FILES" | grep $OUTPUT_FILE_FULLPATH | wc -l)
        if [ $OUTPUT_FILE_GREP -ne 1 ]; then
          echo "File $OUTPUT_FILE_FULLPATH does not exists -> running the job";
          OUTPUT_FILES_EXIST=false;
          break;
        else
          echo "File $OUTPUT_FILE_FULLPATH exists";
        fi
      done
    else
      OUTPUT_FILE=$OUTPUT_FILES
      OUTPUT_FILE_FULLPATH=${OUTPUT_DIR}/${OUTPUT_FILE}
      OUTPUT_FILE_GREP=$($ls_cmd $OUTPUT_FILE_FULLPATH | grep $OUTPUT_FILE_FULLPATH | wc -l)
      if [ $OUTPUT_FILE_GREP -ne 1 ]; then
        echo "File $OUTPUT_FILE_FULLPATH does not exists -> running the job";
        OUTPUT_FILES_EXIST=false;
      else
        echo "File $OUTPUT_FILE_FULLPATH exists";
      fi
    fi

    if [ $OUTPUT_FILES_EXIST = true ]; then
      IS_OUTPUT_FILE_NEWEST=true;
      for INPUT_FILE in $INPUT_FILES; do
        for OUTPUT_FILE in $OUTPUT_FILES; do
          OUTPUT_FILE_FULLPATH=${OUTPUT_DIR}/${OUTPUT_FILE}
          if [ $INPUT_FILE -nt $OUTPUT_FILE_FULLPATH ]; then
            echo -n "Input file $INPUT_FILE is newer than output $OUTPUT_FILE_FULLPATH -> ";
            echo    "deleting the output file $OUTPUT_FILE_FULLPATH and running the job";
            rm -f $OUTPUT_FILE_FULLPATH;
            IS_OUTPUT_FILE_NEWEST=false;
            break;
          fi
        done
      done
      if [ $IS_OUTPUT_FILE_NEWEST = true ]; then
        EXIT_CODE=0
        return $EXIT_CODE;
      fi
    fi

    # Check that input histograms are ok
    check_that_histograms_are_valid.py $INPUT_FILES &>> $EXECUTABLE_LOG_FILE_NAME
    EXIT_CODE=$?

    IO_GREP=$(grep "SysError in <TFile::ReadBuffer>" $EXECUTABLE_LOG_FILE_NAME | grep "(Input/output error)" | wc -l)
    if [[ $IO_GREP -ne 0 ]]; then
      echo "Encountered I/O error; setting the exit code accordingly";
      EXIT_CODE=3;
    fi

    if [[ $EXIT_CODE -ne 0 ]]; then
	  echo "ERROR: Some of the input histograms are not valid. Will stop execution.";
	  return $EXIT_CODE;
    fi

    echo "Create job directory: mkdir -p $JOB_DIR"
    mkdir -p $JOB_DIR

    cd $JOB_DIR

    echo "Sleeping for $RANDOM_SLEEP seconds"
    sleep $RANDOM_SLEEP

    echo "Time is: `date`"
    echo "Current directory: $PWD"
    echo "Contents of current directory:"
    ls -l $PWD

    CMSSW_SEARCH_PATH="$JOB_DIR:{{ cmssw_base_dir }}/src"

    echo "Execute command: /usr/bin/time --verbose {{ exec_name }} {{ command_line_parameter }} &>> $EXECUTABLE_LOG_FILE_NAME"
    /usr/bin/time --verbose {{ exec_name }} {{ command_line_parameter }} &>> $EXECUTABLE_LOG_FILE_NAME
    EXIT_CODE=$?
    echo "Command /usr/bin/time --verbose {{ exec_name }} exited with code $EXIT_CODE"

    echo "Time is: `date`"

    IO_GREP=$(grep "SysError in <TFile::ReadBuffer>" $EXECUTABLE_LOG_FILE_NAME | grep "(Input/output error)" | wc -l)
    if [[ $IO_GREP -ne 0 ]]; then
      echo "Encountered I/O error; setting the exit code accordingly";
      EXIT_CODE=3;
    fi

    if [[ $KEEP_LOGS = True ]] || [[ $EXIT_CODE -ne 0 ]]; then
      if [ ! -d $EXECUTABLE_LOG_DIR ]; then
        echo "Create final log directory: mkdir -p $EXECUTABLE_LOG_DIR"
        mkdir -p $EXECUTABLE_LOG_DIR
      fi

      cp -v $EXECUTABLE_LOG_FILE_NAME $EXECUTABLE_LOG_FILE
      sleep 5 # sleep before cleaning up cwd in case of an error
    fi

    if [[ $EXIT_CODE -ne 0 ]]; then
      echo 'ERROR: hadd exited w/ non-zero return code. Will stop execution.'
      cleanup "$JOB_DIR"
      return $EXIT_CODE
    fi

    echo "Contents of temporary job dir: ls -laR $JOB_DIR"
    ls -laR $JOB_DIR

    SKIP_COPY={{ skip_copy }}
    if [[ $SKIP_COPY -eq 0 ]]; then
      echo "Copying output files: {{ outputFiles }}"
      for OUTPUT_FILE in $OUTPUT_FILES; do
        # Check that input histograms are equal to output histogram
        check_that_histograms_are_equal.py $OUTPUT_FILE $INPUT_FILES
        EXIT_CODE=$?

        if [[ $EXIT_CODE -ne 0 ]]; then
        echo 'ERROR: Input histograms do not equal output histogram. Will stop execution.'
        return 6;
        fi

        OUTPUT_FILE_SIZE=$(stat -c '%s' $OUTPUT_FILE)
        if [ -n "$OUTPUT_FILE_SIZE" ] && [ $OUTPUT_FILE_SIZE -ge 1000 ]; then
          echo "$cp_cmd $OUTPUT_FILE $OUTPUT_DIR/$OUTPUT_FILE"

          CP_RETRIES=0
          COPIED=false
          while [ $CP_RETRIES -lt 3 ]; do
            CP_RETRIES=$[CP_RETRIES + 1];
            $cp_cmd $OUTPUT_FILE $OUTPUT_DIR/$OUTPUT_FILE

            # add a small delay before stat'ing the file
            sleep 5s

            REMOTE_SIZE=$($st_cmd $OUTPUT_DIR/$OUTPUT_FILE)
            if [ "$REMOTE_SIZE" == "$OUTPUT_FILE_SIZE" ]; then
              COPIED=true
              break;
            else
              continue;
            fi
          done

          if [ ! $COPIED ]; then
            EXIT_CODE=5;
          else
            $ls_cmd $OUTPUT_DIR/$OUTPUT_FILE
          fi

        else
          echo "$OUTPUT_FILE is broken, will exit with code 1."
          rm $OUTPUT_FILE
          EXIT_CODE=1
        fi
      done
    fi

    echo "End time is: `date`"

    cleanup "$JOB_DIR"

    echo "Waiting for 10 seconds before returning"
    sleep 10

    return $EXIT_CODE
}


# Calls main method

main

EXIT_CODE=$?
echo "Final exit code is: $EXIT_CODE"
exit $EXIT_CODE

# End of file
